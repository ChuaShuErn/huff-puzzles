 
/** 
 *  SEND_ETHER HUFF EXERCISE
 *  
 *  The task is to enable this contract, when called with function `sendEther(address)` to
 *  transfer the value sent with the call to the address in the argument.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function sendEther(address) payable returns()
// gas: amount of gas to send to the sub context to execute. The gas that is not used by the sub context is returned to this one.
// address: the account which context to execute.
// value: value in wei to send to the account.
// argsOffset: byte offset in the memory in bytes, the calldata of the sub context.
// argsSize: byte size to copy (size of the calldata).
// retOffset: byte offset in the memory in bytes, where to store the return data of the sub context.
// retSize: byte size to copy (size of the return data).


 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr // [sig]

    __FUNC_SIG(sendEther) eq sendEther jumpi

    0x00 0x00 revert

    sendEther:
        0x00 // [retSize]
        0x00 // [retOffset,retSize]
        0x00 // [argsSize,argsSize,retOffset,retSize]
        0x00 // [argOffset,argsSize,retOffset,retSize]
        callvalue // [value,argOffset,argsSize,retOffset,retSize]
        0x04 calldataload // [targetAddress,value,argOffset,argsSize,retOffset,retSize]
        //gas? 21k?
       // 0x5208
        gas //[gas,targetAddress,value,argOffset,argsSize,retOffset,retSize]
        call
       
       0x00 mstore 0x20 0x00 return
    
 }